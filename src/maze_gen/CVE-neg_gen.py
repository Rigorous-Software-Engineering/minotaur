""" Like CVE_gen, but usess negated clauses to generate edges that don't lead to a bug.
"""
import random
import logging

import transforms # pylint: disable=import-error
from smt2 import parser # pylint: disable=import-error
from smt2 import converter # pylint: disable=import-error

LOGGER = logging.getLogger(__name__)

class Generator:
    def __init__(self, size, edges, sln, smt_file, transformations):
        self.size = size
        self.edges = edges
        self.sln = sln
        self.transformations = transformations
        self.logic = parser.read_file(smt_file).logic
        self.is_sat, self.is_wd = parser.get_forced_parameters(smt_file, transformations)

        try:
            self.constraints, self.vars_all, self.array_size = parser.parse(smt_file, transformations, check_neg = True, continue_on_error = True)
        except Exception as e:
            LOGGER.warning('Error while parsing smt file %s', smt_file)
            LOGGER.exception(e)
            self.constraints = {} if self.is_sat else {'(1==0)': False}
            self.vars_all = {}
            self.array_size = 0

        transforms.remove_constraints(self.constraints, transformations['dc'])
        transforms.make_const(self.vars_all, transformations['mc'])

        self.groups, self.vars = parser.independent_formulas(self.constraints, self.vars_all, self.array_size)

        if transformations['sh']:
            self.groups, self.vars = transforms.coshuffle(self.groups, self.vars)

        self.insert = []
        for _ in range(self.size):
            self.insert.append(0)
        while sum(self.insert) < len(self.groups):
            for func in self.sln:
                self.insert[func] += 1
                if sum(self.insert) >= len(self.groups):
                    break
        if transformations['sh']:
            random.shuffle(self.insert)

    def get_logic_def(self):
        logic_def = ""
        if 'BV' in self.logic:
            logic_def += converter.get_bv_helpers(self.is_wd)
        if self.array_size > 0:
            logic_def += converter.get_array_helpers(self.array_size)
        return logic_def

    def get_numb_edges(self, idx):
        return len(self.edges[idx])

    def get_groups(self, idx, group_idx):
        numb_edges = self.get_numb_edges(idx)
        if self.insert[idx] == 0:
            group, variables = parser.get_subgroup(self.groups, self.vars, idx)
            negated_groups, variables = parser.get_negated(self.constraints, group, variables, numb_edges - 1)
        else:
            group, variables = [],{}
            for cnt in range(self.insert[idx]):
                group.extend(self.groups[group_idx + cnt])
                variables.update(self.vars[group_idx + cnt])
            negated_groups, variables = parser.get_negated(self.constraints, group, variables, numb_edges - 2)
        return group, variables, negated_groups

    def get_bug_edge(self, idx):
        next_edge, bug_edge, = 0, 0
        for i, edge in enumerate(self.sln):
            if edge == idx:
                if i == len(self.sln) - 1:
                    next_edge = 'bug'
                else:
                    next_edge = self.sln[i+1]
        for n in range(len(self.edges[idx])):
            if self.edges[idx][n] == next_edge:
                bug_edge = n
        return bug_edge

    def get_logic_c(self):
        logic_c = []
        group_idx = 0
        for idx in range(self.size):
            if self.get_numb_edges(idx) == 0:
                logic_c.append("")
                continue

            group, variables, negated_groups = self.get_groups(idx, group_idx)
            logic = ""
            

            for var in variables:
                logic += self.get_initialization(var, variables)

            if self.insert[idx] == 0:
                bug_edge = self.get_bug_edge(idx)
                logic += f"\tint flag = {bug_edge};\n" # Since all groups are negated we cannot change the flag
                for n, group in enumerate(negated_groups):
                    tab_cnt = 0
                    for constraint in group:
                        logic += "\t"*tab_cnt + f"\tif{constraint}{{\n"
                        tab_cnt += 1
                    logic += "\t"*tab_cnt + f"\tflag = {n+(1 if n >= bug_edge else 0)};\n"
                    for k in range(len(group)-1, -1, -1):
                        logic += "\t"*k + "\t}\n"
            else:
                logic += "\tint flag = 0;\n"
                numb_edges = self.get_numb_edges(idx)
                bug_edge = self.get_bug_edge(idx)
                tab_cnt = 0
                # function call towards func_bug
                for constraint in group:
                    logic += "\t"*tab_cnt + "\tif{}{{\n".format(constraint)
                    tab_cnt += 1
                if bug_edge == numb_edges - 1 and bug_edge > 0:
                    logic += "\t"*tab_cnt + "\tflag = {};\n".format(bug_edge)
                else:
                    logic += "\t"*tab_cnt + "\tflag = {};\n".format(bug_edge + 1)
                for k in range(len(group)-1, -1, -1):
                    logic += "\t"*k + "\t\t}\n"
                # rest of function calls
                for n in range(len(negated_groups)):
                    tab_cnt = 0
                    for constraint in negated_groups[n]:
                        logic += "\t"*tab_cnt + "\tif{}{{\n".format(constraint)
                        tab_cnt += 1
                    if n >= bug_edge:
                        logic += "\t"*tab_cnt + "\tflag = {};\n".format(n + 2)
                    else:
                        logic += "\t"*tab_cnt + "\tflag = {};\n".format(n + 1)
                    for k in range(len(negated_groups[n])-1, -1, -1):
                        logic += "\t"*k + "\t}\n"
            logic_c.append(logic)
            group_idx += self.insert[idx]
        return logic_c

    def get_initialization(self, var, variables):
        if '[' in var: #Arrays
            dim = var.count('[')
            width, vartype = variables[var].split("_")
            return "\t{} {};\n\tinit({}{},{},{});\n".format(vartype,var,'*'*(dim-1),var.split('[')[0],width,converter.get_array_size_from_dim(dim))
        if variables[var] == 'bool':
            return "\t_Bool {} = __VERIFIER_nondet_bool();\n".format(var)
        if variables[var] == 'const bool':
            return "\t const _Bool {} = __VERIFIER_nondet_bool();\n".format(var)
        orig_type = variables[var]
        short_type = orig_type.split(" ")[-1]
        if 'unsigned' in orig_type:
            short_type = 'u' + short_type
        return "\t{} {} = __VERIFIER_nondet_{}();\n".format(variables[var], var, short_type)

    def get_guard(self):
        guard = []
        for idx in range(self.size):
            numb_edges = self.get_numb_edges(idx)
            conds = []
            if self.insert[idx] == 0:
                for n in range(numb_edges):
                    conds.append(f"flag == {n}")
                guard.append(conds)
            else:
                bug_edge = self.get_bug_edge(idx)
                if bug_edge == numb_edges - 1:
                    if bug_edge == 0:
                        conds.append("flag == 1")
                    else:
                        for n in range(numb_edges - 2):
                            conds.append("flag == " + str(n + 1))
                        conds.append("flag == 0")
                        conds.append("flag == " + str(bug_edge))
                else:
                    for n in range(numb_edges - 1):
                        conds.append("flag == " + str(n + 1))
                    conds.append("flag == 0")
                guard.append(conds)
        return guard
