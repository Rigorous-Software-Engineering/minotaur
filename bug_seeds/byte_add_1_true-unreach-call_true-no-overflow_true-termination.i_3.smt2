(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun |c_mp_add_#in~a| () (_ BitVec 32))
(declare-fun |c_mp_add_#in~b| () (_ BitVec 32))
(declare-fun c_mp_add_~a1~0 () (_ BitVec 8))
(declare-fun c_mp_add_~a2~0 () (_ BitVec 8))
(declare-fun c_mp_add_~a3~0 () (_ BitVec 8))
(declare-fun c_mp_add_~r0~0 () (_ BitVec 8))
(declare-fun c_mp_add_~carry~0 () (_ BitVec 16))
(declare-fun c_mp_add_~partial_sum~0 () (_ BitVec 16))
(assert (let ((.cse0 ((_ extract 15 0) (bvadd ((_ zero_extend 16) ((_ extract 15 0) ((_ zero_extend 24) ((_ extract 7 0) |c_mp_add_#in~a|)))) ((_ zero_extend 24) ((_ extract 7 0) |c_mp_add_#in~b|)))))) (and (= ((_ zero_extend 24) ((_ extract 7 0) (bvlshr |c_mp_add_#in~b| (_ bv16 32)))) (_ bv0 32)) (= c_mp_add_~partial_sum~0 (_ bv0 16)) (not (bvsgt ((_ zero_extend 16) .cse0) (_ bv255 32))) (= c_mp_add_~carry~0 (_ bv0 16)) (= c_mp_add_~a3~0 ((_ extract 7 0) (bvlshr |c_mp_add_#in~a| (_ bv24 32)))) (= c_mp_add_~a2~0 ((_ extract 7 0) (bvlshr |c_mp_add_#in~a| (_ bv16 32)))) (= ((_ zero_extend 24) ((_ extract 7 0) (bvlshr |c_mp_add_#in~b| (_ bv8 32)))) (_ bv0 32)) (= c_mp_add_~r0~0 ((_ extract 7 0) .cse0)) (= c_mp_add_~a1~0 ((_ extract 7 0) (bvlshr |c_mp_add_#in~a| (_ bv8 32)))) (= ((_ zero_extend 24) ((_ extract 7 0) (bvlshr |c_mp_add_#in~b| (_ bv24 32)))) (_ bv0 32)))))
(assert (not (let ((.cse0 ((_ extract 15 0) ((_ zero_extend 24) c_mp_add_~a2~0)))) (or (= (bvadd |c_mp_add_#in~b| |c_mp_add_#in~a|) (bvor (bvor (bvor ((_ zero_extend 24) c_mp_add_~r0~0) (bvshl ((_ zero_extend 24) ((_ extract 7 0) ((_ extract 15 0) (bvadd ((_ zero_extend 24) c_mp_add_~a1~0) ((_ zero_extend 16) c_mp_add_~carry~0))))) (_ bv8 32))) (bvshl ((_ zero_extend 24) ((_ extract 7 0) .cse0)) (_ bv16 32))) (bvshl ((_ zero_extend 24) ((_ extract 7 0) ((_ extract 15 0) ((_ zero_extend 24) c_mp_add_~a3~0)))) (_ bv24 32)))) (bvsgt ((_ zero_extend 16) .cse0) (_ bv255 32))))))
(check-sat)
(exit)
